是通过linked list实现的，这意味着即使成千上万的元素在一个列表中，在列表头和尾增加一个元素的操作是在一个常量时间内完成的。
另一个重要优势在于可以在常量时间内获取一个固定长度的子list。

list对于某些特定场景是非常有用的：
1、记录用户post到社区网络的最新更新。
2、使用消费者-生产者模式进行进程间通信，生产者推送数据到list中，消费者消费这些数据并执行操作。

1、linsert插入值在key之前或之后。如果key不存在，它被认为是一个空列表，并没有进行任何操作。
127.0.0.1:6379> getrange name3 1 3
"ban"
127.0.0.1:6379> RPUSH list1 "foo"
(integer) 1
127.0.0.1:6379> RPUSH list1 "bar"
(integer) 2
127.0.0.1:6379> LINSERT list1 BEFORE "bar" "Yes"
(integer) 3
127.0.0.1:6379> LRANGE list1 0 -1
1) "foo"
2) "Yes"
3) "bar"
127.0.0.1:6379> LINSERT list1 after "bar" "Yes1"
(integer) 4
127.0.0.1:6379> LRANGE list1 0 -1
1) "foo"
2) "Yes"
3) "bar"
4) "Yes1"

ltrim命令和lrange类似，但它设置这个范围作为新的list值，而不是展示指定范围的元素，所有在指定范围外的元素会被删除：
127.0.0.1:6379> rpush mylist 1 2 3 4 5
(integer) 5
127.0.0.1:6379> ltrim mylist 0 2
OK
127.0.0.1:6379> lrange mylist 0 -1
1) "1"
2) "2"
3) "3"

redis实现了brpop好blpop命令，他们是rpop和lpop的另一个版本，可以在list为空的时候进行阻塞，仅当一个新的元素加入到列表中，或者用户指定
的超时时间到达时，他们才会返回给调用者。
127.0.0.1:6379> blpop mylist 5
1) "mylist"
2) "2"
等待在列表mylist中的元素，但是如果5秒后还没有元素有效则返回。
可以使用0作为超时时间表示永久等待，并且也可以指定多个list而不仅是一个list。这样就可以在同一时间等待多个list，并且当第一个list接收到元素
时获得通知。
客户端按照顺序被服务：当某个客户端推送一个元素时，第一个阻塞等待list的客户端会被最先服务。
brpop的返回值和rpop不同：它是两个元素的数组，数组中除了新加入的元素，还有key的名称，这是因为brpop和blpop能够等待多个列队中的元素。
如果超时时间到达，则返回null。

127.0.0.1:6379> lpop mylist
"3"
127.0.0.1:6379> lpop mylist
(nil)
127.0.0.1:6379> exists mylist
(integer) 0
在所有元素pop之后，这个key不再存在。