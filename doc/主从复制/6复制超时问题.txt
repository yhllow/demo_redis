主从节点复制超时是导致复制中断的最重要的原因之一，本小节单独说明超时问题，下一小节说明其他会导致复制中断的问题。
超时判断意义
	在复制连接建立过程中及之后，主从节点都有机制判断连接是否超时，其意义在于：
	如果主节点判断连接超时，其会释放相应从节点的连接，从而释放各种资源，否则无效的从节点仍会占用主节点的各种资源（输出缓冲区、带宽、连接等）。
	此外连接超时的判断可以让主节点更准确的知道当前有效从节点的个数，有助于保证数据安全（配合前面讲到的 min-slaves-to-write 等参数）。
	如果从节点判断连接超时，则可以及时重新建立连接，避免与主节点数据长期的不一致。
判断机制
	主从复制超时判断的核心，在于 repl-timeout 参数，该参数规定了超时时间的阈值（默认 60s），对于主节点和从节点同时有效。
	主从节点触发超时的条件分别如下：
		主节点：每秒1次调用复制定时函数 replicationCron()，在其中判断当前时间距离上次收到各个从节点 REPLCONF ACK 的时间，是否超过了 repl-timeout 值，如果超过了则释放相应从节点的连接。
		从节点：从节点对超时的判断同样是在复制定时函数中判断。
从节点的基本逻辑是：
	如果当前处于连接建立阶段，且距离上次收到主节点的信息的时间已超过 repl-timeout，则释放与主节点的连接。
	如果当前处于数据同步阶段，且收到主节点的 RDB 文件的时间超时，则停止数据同步，释放连接。
	如果当前处于命令传播阶段，且距离上次收到主节点的 PING 命令或数据的时间已超过 repl-timeout 值，则释放与主节点的连接。

需要注意的坑
下面介绍与复制阶段连接超时有关的一些实际问题：
	数据同步阶段：在主从节点进行全量复制 bgsave 时，主节点需要首先 fork 子进程将当前数据保存到 RDB 文件中，然后再将 RDB 文件通过网络传输到从节点。
		如果 RDB 文件过大，主节点在 fork 子进程+保存 RDB 文件时耗时过多，可能会导致从节点长时间收不到数据而触发超时。
		此时从节点会重连主节点，然后再次全量复制，再次超时，再次重连……这是个悲伤的循环。
		为了避免这种情况的发生，除了注意 Redis 单机数据量不要过大，另一方面就是适当增大 repl-timeout 值，具体的大小可以根据 bgsave 耗时来调整。
	命令传播阶段：如前所述，在该阶段主节点会向从节点发送 PING 命令，频率由 repl-ping-slave-period 控制；该参数应明显小于 repl-timeout 值(后者至少是前者的几倍)。
		否则，如果两个参数相等或接近，网络抖动导致个别 PING 命令丢失，此时恰巧主节点也没有向从节点发送数据，则从节点很容易判断超时。
	慢查询导致的阻塞：如果主节点或从节点执行了一些慢查询（如 keys * 或者对大数据的 hgetall 等），导致服务器阻塞；阻塞期间无法响应复制连接中对方节点的请求，可能导致复制超时。

复制中断问题
主从节点超时是复制中断的原因之一，除此之外，还有其他情况可能导致复制中断，其中最主要的是复制缓冲区溢出问题。
复制缓冲区溢出
	前面曾提到过，在全量复制阶段，主节点会将执行的写命令放到复制缓冲区中。
	该缓冲区存放的数据包括了以下几个时间段内主节点执行的写命令：
		bgsave 生成 RDB 文件。
		RDB 文件由主节点发往从节点。
		从节点清空老数据并载入 RDB 文件中的数据。
	当主节点数据量较大，或者主从节点之间网络延迟较大时，可能导致该缓冲区的大小超过了限制，此时主节点会断开与从节点之间的连接。
	这种情况可能引起全量复制→复制缓冲区溢出导致连接中断→重连→全量复制→复制缓冲区溢出导致连接中断……的循环。
	复制缓冲区的大小由 client-output-buffer-limit slave {hard limit} {soft limit} {soft seconds} 配置，默认值为 client-output-buffer-limit slave 256MB 64MB 60。
	其含义是：如果 buffer 大于 256MB，或者连续 60s 大于 64MB，则主节点会断开与该从节点的连接。该参数是可以通过 config set 命令动态配置的（即不重启 Redis 也可以生效）。
	需要注意的是，复制缓冲区是客户端输出缓冲区的一种，主节点会为每一个从节点分别分配复制缓冲区；而复制积压缓冲区则是一个主节点只有一个，无论它有多少个从节点。